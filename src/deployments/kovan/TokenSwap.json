{
  "address": "0x48a6516c3dB55cda6557a94AbD6f6c30f5D3dcD0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_allocations",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "started",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x67fce213dba36d5eecdfad094fa98bee37280cbb9f79df9e39c1077d7adf39a1",
  "receipt": {
    "to": null,
    "from": "0xA4d4a980C5CEE392e0BcDEeCDca29C8A4a24Ac35",
    "contractAddress": "0x48a6516c3dB55cda6557a94AbD6f6c30f5D3dcD0",
    "transactionIndex": 11,
    "gasUsed": "778519",
    "logsBloom": "0x
    "blockHash": "0x28c8cf187a1c14ab46d69fd5bb90a0f755d59517beff99ab13e9d5e74c67ccc0",
    "transactionHash": "0x67fce213dba36d5eecdfad094fa98bee37280cbb9f79df9e39c1077d7adf39a1",
    "logs": [],
    "blockNumber": 31374116,
    "cumulativeGasUsed": "3585314",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xa4d4a980c5cee392e0bcdeecdca29c8a4a24ac35"
    ],
    [
      "1000000000000000000"
    ],
    "0xD3E1ff95d66b69dEc2bbE4358616548e9f385083"
  ],
  "numDeployments": 3,
  "solcInputHash": "544793aa877bc455cc75860b072a1611",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenSwap.sol\":\"TokenSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract TokenSwap {\\n    ERC20 public immutable token;\\n    mapping(address => uint) public allocations;\\n    mapping(address => uint) public claimed;\\n    uint public start;\\n    uint public vestingPeriod = 15552000; // 180 days\\n    bool public started;\\n    address private creator;\\n\\n    constructor(address[] memory _users, uint[] memory _allocations, address _token) {\\n        require(_users.length == _allocations.length, \\\"!Length\\\");\\n        for (uint i=0; i<_users.length; i++) {\\n            allocations[_users[i]] = _allocations[i];\\n        }\\n        creator = msg.sender;\\n        token = ERC20(_token);\\n    }\\n\\n    function startSwap() external {\\n        require(msg.sender == creator, \\\"!Creator\\\");\\n        require(!started, \\\"Started\\\");\\n        started = true;\\n        start = block.timestamp;\\n    }\\n\\n    function claim() external {\\n        require(started, \\\"!Started\\\");\\n        uint _claimable = claimable(msg.sender);\\n        require(_claimable > 0, \\\"Nothing to claim\\\");\\n        claimed[msg.sender] += _claimable;\\n        token.transfer(msg.sender, _claimable);\\n    }\\n\\n    function claimable(address _user) public view returns (uint) {\\n        if (!started) return 0;\\n        if (block.timestamp-start > vestingPeriod) return allocations[_user] - claimed[_user];\\n        return allocations[_user]*(block.timestamp-start)/vestingPeriod - claimed[_user];\\n    }\\n}\\n\",\"keccak256\":\"0xb9aea4c3ac76ba50e2f17e01c975e51917ac377ca54c7b53085314247a28e542\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405262ed4e006003553480156200001857600080fd5b50604051620012013803806200120183398181016040528101906200003e919062000361565b815183511462000085576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200007c9062000410565b60405180910390fd5b60005b83518110156200016d57828181518110620000cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160008086848151811062000111577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808062000164906200053e565b91505062000088565b5033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505062000658565b60006200020662000200846200045b565b62000432565b905080838252602082019050828560208602820111156200022657600080fd5b60005b858110156200025a57816200023f8882620002d9565b84526020840193506020830192505060018101905062000229565b5050509392505050565b60006200027b62000275846200048a565b62000432565b905080838252602082019050828560208602820111156200029b57600080fd5b60005b85811015620002cf5781620002b488826200034a565b8452602084019350602083019250506001810190506200029e565b5050509392505050565b600081519050620002ea8162000624565b92915050565b600082601f8301126200030257600080fd5b815162000314848260208601620001ef565b91505092915050565b600082601f8301126200032f57600080fd5b81516200034184826020860162000264565b91505092915050565b6000815190506200035b816200063e565b92915050565b6000806000606084860312156200037757600080fd5b600084015167ffffffffffffffff8111156200039257600080fd5b620003a086828701620002f0565b935050602084015167ffffffffffffffff811115620003be57600080fd5b620003cc868287016200031d565b9250506040620003df86828701620002d9565b9150509250925092565b6000620003f8600783620004b9565b91506200040582620005fb565b602082019050919050565b600060208201905081810360008301526200042b81620003e9565b9050919050565b60006200043e62000451565b90506200044c828262000508565b919050565b6000604051905090565b600067ffffffffffffffff821115620004795762000478620005bb565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620004a857620004a7620005bb565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000620004d782620004de565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200051382620005ea565b810181811067ffffffffffffffff82111715620005355762000534620005bb565b5b80604052505050565b60006200054b82620004fe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200058157620005806200058c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f214c656e67746800000000000000000000000000000000000000000000000000600082015250565b6200062f81620004ca565b81146200063b57600080fd5b50565b6200064981620004fe565b81146200065557600080fd5b50565b60805160601c610b836200067e6000396000818161043a015261062b0152610b836000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637313ee5a116100665780637313ee5a14610120578063be9a65551461013e578063c884ef831461015c578063c992b5b21461018c578063fc0c546a1461019657610093565b80631f2698ab14610098578063402914f5146100b65780634e71d92d146100e657806352a9039c146100f0575b600080fd5b6100a06101b4565b6040516100ad91906107ba565b60405180910390f35b6100d060048036038101906100cb9190610677565b6101c7565b6040516100dd9190610870565b60405180910390f35b6100ee610343565b005b61010a60048036038101906101059190610677565b6104e9565b6040516101179190610870565b60405180910390f35b610128610501565b6040516101359190610870565b60405180910390f35b610146610507565b6040516101539190610870565b60405180910390f35b61017660048036038101906101719190610677565b61050d565b6040516101839190610870565b60405180910390f35b610194610525565b005b61019e610629565b6040516101ab91906107d5565b60405180910390f35b600460009054906101000a900460ff1681565b6000600460009054906101000a900460ff166101e6576000905061033e565b600354600254426101f7919061097d565b111561028d57600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610286919061097d565b905061033e565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600354600254426102de919061097d565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103279190610923565b61033191906108f2565b61033b919061097d565b90505b919050565b600460009054906101000a900460ff16610392576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610389906107f0565b60405180910390fd5b600061039d336101c7565b9050600081116103e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d990610810565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610431919061089c565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610493929190610791565b602060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e591906106a0565b5050565b60006020528060005260406000206000915090505481565b60035481565b60025481565b60016020528060005260406000206000915090505481565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90610830565b60405180910390fd5b600460009054906101000a900460ff1615610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc90610850565b60405180910390fd5b6001600460006101000a81548160ff02191690831515021790555042600281905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008135905061065c81610b1f565b92915050565b60008151905061067181610b36565b92915050565b60006020828403121561068957600080fd5b60006106978482850161064d565b91505092915050565b6000602082840312156106b257600080fd5b60006106c084828501610662565b91505092915050565b6106d2816109b1565b82525050565b6106e1816109c3565b82525050565b6106f0816109f9565b82525050565b600061070360088361088b565b915061070e82610a7b565b602082019050919050565b600061072660108361088b565b915061073182610aa4565b602082019050919050565b600061074960088361088b565b915061075482610acd565b602082019050919050565b600061076c60078361088b565b915061077782610af6565b602082019050919050565b61078b816109ef565b82525050565b60006040820190506107a660008301856106c9565b6107b36020830184610782565b9392505050565b60006020820190506107cf60008301846106d8565b92915050565b60006020820190506107ea60008301846106e7565b92915050565b60006020820190508181036000830152610809816106f6565b9050919050565b6000602082019050818103600083015261082981610719565b9050919050565b600060208201905081810360008301526108498161073c565b9050919050565b600060208201905081810360008301526108698161075f565b9050919050565b60006020820190506108856000830184610782565b92915050565b600082825260208201905092915050565b60006108a7826109ef565b91506108b2836109ef565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108e7576108e6610a1d565b5b828201905092915050565b60006108fd826109ef565b9150610908836109ef565b92508261091857610917610a4c565b5b828204905092915050565b600061092e826109ef565b9150610939836109ef565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561097257610971610a1d565b5b828202905092915050565b6000610988826109ef565b9150610993836109ef565b9250828210156109a6576109a5610a1d565b5b828203905092915050565b60006109bc826109cf565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a0482610a0b565b9050919050565b6000610a16826109cf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f2153746172746564000000000000000000000000000000000000000000000000600082015250565b7f4e6f7468696e6720746f20636c61696d00000000000000000000000000000000600082015250565b7f2143726561746f72000000000000000000000000000000000000000000000000600082015250565b7f5374617274656400000000000000000000000000000000000000000000000000600082015250565b610b28816109b1565b8114610b3357600080fd5b50565b610b3f816109c3565b8114610b4a57600080fd5b5056fea26469706673582212209d4aae85e57e76acfa68a2d8a31bf39ad56bbc8744843af3290967a07dd4ff7664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80637313ee5a116100665780637313ee5a14610120578063be9a65551461013e578063c884ef831461015c578063c992b5b21461018c578063fc0c546a1461019657610093565b80631f2698ab14610098578063402914f5146100b65780634e71d92d146100e657806352a9039c146100f0575b600080fd5b6100a06101b4565b6040516100ad91906107ba565b60405180910390f35b6100d060048036038101906100cb9190610677565b6101c7565b6040516100dd9190610870565b60405180910390f35b6100ee610343565b005b61010a60048036038101906101059190610677565b6104e9565b6040516101179190610870565b60405180910390f35b610128610501565b6040516101359190610870565b60405180910390f35b610146610507565b6040516101539190610870565b60405180910390f35b61017660048036038101906101719190610677565b61050d565b6040516101839190610870565b60405180910390f35b610194610525565b005b61019e610629565b6040516101ab91906107d5565b60405180910390f35b600460009054906101000a900460ff1681565b6000600460009054906101000a900460ff166101e6576000905061033e565b600354600254426101f7919061097d565b111561028d57600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610286919061097d565b905061033e565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600354600254426102de919061097d565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103279190610923565b61033191906108f2565b61033b919061097d565b90505b919050565b600460009054906101000a900460ff16610392576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610389906107f0565b60405180910390fd5b600061039d336101c7565b9050600081116103e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d990610810565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610431919061089c565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610493929190610791565b602060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e591906106a0565b5050565b60006020528060005260406000206000915090505481565b60035481565b60025481565b60016020528060005260406000206000915090505481565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90610830565b60405180910390fd5b600460009054906101000a900460ff1615610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc90610850565b60405180910390fd5b6001600460006101000a81548160ff02191690831515021790555042600281905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008135905061065c81610b1f565b92915050565b60008151905061067181610b36565b92915050565b60006020828403121561068957600080fd5b60006106978482850161064d565b91505092915050565b6000602082840312156106b257600080fd5b60006106c084828501610662565b91505092915050565b6106d2816109b1565b82525050565b6106e1816109c3565b82525050565b6106f0816109f9565b82525050565b600061070360088361088b565b915061070e82610a7b565b602082019050919050565b600061072660108361088b565b915061073182610aa4565b602082019050919050565b600061074960088361088b565b915061075482610acd565b602082019050919050565b600061076c60078361088b565b915061077782610af6565b602082019050919050565b61078b816109ef565b82525050565b60006040820190506107a660008301856106c9565b6107b36020830184610782565b9392505050565b60006020820190506107cf60008301846106d8565b92915050565b60006020820190506107ea60008301846106e7565b92915050565b60006020820190508181036000830152610809816106f6565b9050919050565b6000602082019050818103600083015261082981610719565b9050919050565b600060208201905081810360008301526108498161073c565b9050919050565b600060208201905081810360008301526108698161075f565b9050919050565b60006020820190506108856000830184610782565b92915050565b600082825260208201905092915050565b60006108a7826109ef565b91506108b2836109ef565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108e7576108e6610a1d565b5b828201905092915050565b60006108fd826109ef565b9150610908836109ef565b92508261091857610917610a4c565b5b828204905092915050565b600061092e826109ef565b9150610939836109ef565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561097257610971610a1d565b5b828202905092915050565b6000610988826109ef565b9150610993836109ef565b9250828210156109a6576109a5610a1d565b5b828203905092915050565b60006109bc826109cf565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a0482610a0b565b9050919050565b6000610a16826109cf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f2153746172746564000000000000000000000000000000000000000000000000600082015250565b7f4e6f7468696e6720746f20636c61696d00000000000000000000000000000000600082015250565b7f2143726561746f72000000000000000000000000000000000000000000000000600082015250565b7f5374617274656400000000000000000000000000000000000000000000000000600082015250565b610b28816109b1565b8114610b3357600080fd5b50565b610b3f816109c3565b8114610b4a57600080fd5b5056fea26469706673582212209d4aae85e57e76acfa68a2d8a31bf39ad56bbc8744843af3290967a07dd4ff7664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 722,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "allocations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 726,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "claimed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 728,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "start",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 731,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "vestingPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 733,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "started",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 735,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "creator",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}