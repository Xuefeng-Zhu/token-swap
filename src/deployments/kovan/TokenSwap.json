{
  "address": "0x7bD1b0D6aF500D1AF012bEAAEcCe82474867F001",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_allocations",
          "type": "uint256[]"
        }
      ],
      "name": "setAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "started",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0d9ce4c3bc25f9b856be224ff1adb9d2144cbd8e5397fbf9d0cef90f4861d52",
  "receipt": {
    "to": null,
    "from": "0xA4d4a980C5CEE392e0BcDEeCDca29C8A4a24Ac35",
    "contractAddress": "0x7bD1b0D6aF500D1AF012bEAAEcCe82474867F001",
    "transactionIndex": 1,
    "gasUsed": "1219640",
    "logsBloom": "0x
    "blockHash": "0x3d480d158db17ad6798eb246a5f2384dada54d79876fabd0e77f2bc9532b6890",
    "transactionHash": "0xb0d9ce4c3bc25f9b856be224ff1adb9d2144cbd8e5397fbf9d0cef90f4861d52",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 31890817,
        "transactionHash": "0xb0d9ce4c3bc25f9b856be224ff1adb9d2144cbd8e5397fbf9d0cef90f4861d52",
        "address": "0x7bD1b0D6aF500D1AF012bEAAEcCe82474867F001",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a4d4a980c5cee392e0bcdeecdca29c8a4a24ac35"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x3d480d158db17ad6798eb246a5f2384dada54d79876fabd0e77f2bc9532b6890"
      }
    ],
    "blockNumber": 31890817,
    "cumulativeGasUsed": "1345391",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD3E1ff95d66b69dEc2bbE4358616548e9f385083"
  ],
  "numDeployments": 4,
  "solcInputHash": "070588cb94756bda6b2ed3165fd3b423",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"setAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenSwap.sol\":\"TokenSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TokenSwap is Ownable {\\n    ERC20 public immutable token;\\n    mapping(address => uint256) public allocations;\\n    mapping(address => uint256) public claimed;\\n    uint256 public start;\\n    uint256 public vestingPeriod = 15552000; // 180 days\\n    bool public started;\\n\\n    constructor(address _token) {\\n        token = ERC20(_token);\\n    }\\n\\n    function setAllocations(\\n        address[] memory _users,\\n        uint256[] memory _allocations\\n    ) external onlyOwner {\\n        require(_users.length == _allocations.length, \\\"!Length\\\");\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            allocations[_users[i]] = _allocations[i];\\n        }\\n    }\\n\\n    function startSwap() external onlyOwner {\\n        require(!started, \\\"Started\\\");\\n        started = true;\\n        start = block.timestamp;\\n    }\\n\\n    function claim() external {\\n        require(started, \\\"!Started\\\");\\n        uint256 _claimable = claimable(msg.sender);\\n        require(_claimable > 0, \\\"Nothing to claim\\\");\\n        claimed[msg.sender] += _claimable;\\n        token.transfer(msg.sender, _claimable);\\n    }\\n\\n    function claimable(address _user) public view returns (uint256) {\\n        if (!started) return 0;\\n        if (block.timestamp - start > vestingPeriod)\\n            return allocations[_user] - claimed[_user];\\n        return\\n            (allocations[_user] * (block.timestamp - start)) /\\n            vestingPeriod -\\n            claimed[_user];\\n    }\\n}\\n\",\"keccak256\":\"0x66833f0c5e74e5a4e1751b340c35aa1af4eb33fbb5bcdc4215c555c136a2d987\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405262ed4e006004553480156200001857600080fd5b506040516200165d3803806200165d83398181016040528101906200003e91906200017f565b6200005e620000526200009c60201b60201c565b620000a460201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050620001f9565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017981620001df565b92915050565b6000602082840312156200019257600080fd5b6000620001a28482850162000168565b91505092915050565b6000620001b882620001bf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001ea81620001ab565b8114620001f657600080fd5b50565b60805160601c61143e6200021f600039600081816106800152610a06015261143e6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637313ee5a1161008c578063c884ef8311610066578063c884ef83146101dc578063c992b5b21461020c578063f2fde38b14610216578063fc0c546a14610232576100cf565b80637313ee5a146101825780638da5cb5b146101a0578063be9a6555146101be576100cf565b80631f2698ab146100d45780631ff64acd146100f2578063402914f51461010e5780634e71d92d1461013e57806352a9039c14610148578063715018a614610178575b600080fd5b6100dc610250565b6040516100e99190610e6f565b60405180910390f35b61010c60048036038101906101079190610c88565b610263565b005b61012860048036038101906101239190610c5f565b61040b565b6040516101359190610f65565b60405180910390f35b610146610589565b005b610162600480360381019061015d9190610c5f565b61072f565b60405161016f9190610f65565b60405180910390f35b610180610747565b005b61018a6107cf565b6040516101979190610f65565b60405180910390f35b6101a86107d5565b6040516101b59190610e2b565b60405180910390f35b6101c66107fe565b6040516101d39190610f65565b60405180910390f35b6101f660048036038101906101f19190610c5f565b610804565b6040516102039190610f65565b60405180910390f35b61021461081c565b005b610230600480360381019061022b9190610c5f565b61090c565b005b61023a610a04565b6040516102479190610e8a565b60405180910390f35b600560009054906101000a900460ff1681565b61026b610a28565b73ffffffffffffffffffffffffffffffffffffffff166102896107d5565b73ffffffffffffffffffffffffffffffffffffffff16146102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690610f25565b60405180910390fd5b8051825114610323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031a90610f05565b60405180910390fd5b60005b825181101561040657818181518110610368577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600160008584815181106103ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806103fe906111c0565b915050610326565b505050565b6000600560009054906101000a900460ff1661042a5760009050610584565b6004546003544261043b91906110ef565b11156104d257600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104cb91906110ef565b9050610584565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004546003544261052391906110ef565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461056d9190611095565b6105779190611064565b61058191906110ef565b90505b919050565b600560009054906101000a900460ff166105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90610ea5565b60405180910390fd5b60006105e33361040b565b905060008111610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061f90610ec5565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610677919061100e565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106d9929190610e46565b602060405180830381600087803b1580156106f357600080fd5b505af1158015610707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b9190610cf4565b5050565b60016020528060005260406000206000915090505481565b61074f610a28565b73ffffffffffffffffffffffffffffffffffffffff1661076d6107d5565b73ffffffffffffffffffffffffffffffffffffffff16146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90610f25565b60405180910390fd5b6107cd6000610a30565b565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b60026020528060005260406000206000915090505481565b610824610a28565b73ffffffffffffffffffffffffffffffffffffffff166108426107d5565b73ffffffffffffffffffffffffffffffffffffffff1614610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f90610f25565b60405180910390fd5b600560009054906101000a900460ff16156108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90610f45565b60405180910390fd5b6001600560006101000a81548160ff02191690831515021790555042600381905550565b610914610a28565b73ffffffffffffffffffffffffffffffffffffffff166109326107d5565b73ffffffffffffffffffffffffffffffffffffffff1614610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f90610f25565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ef90610ee5565b60405180910390fd5b610a0181610a30565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610b07610b0284610fa5565b610f80565b90508083825260208201905082856020860282011115610b2657600080fd5b60005b85811015610b565781610b3c8882610bcc565b845260208401935060208301925050600181019050610b29565b5050509392505050565b6000610b73610b6e84610fd1565b610f80565b90508083825260208201905082856020860282011115610b9257600080fd5b60005b85811015610bc25781610ba88882610c4a565b845260208401935060208301925050600181019050610b95565b5050509392505050565b600081359050610bdb816113c3565b92915050565b600082601f830112610bf257600080fd5b8135610c02848260208601610af4565b91505092915050565b600082601f830112610c1c57600080fd5b8135610c2c848260208601610b60565b91505092915050565b600081519050610c44816113da565b92915050565b600081359050610c59816113f1565b92915050565b600060208284031215610c7157600080fd5b6000610c7f84828501610bcc565b91505092915050565b60008060408385031215610c9b57600080fd5b600083013567ffffffffffffffff811115610cb557600080fd5b610cc185828601610be1565b925050602083013567ffffffffffffffff811115610cde57600080fd5b610cea85828601610c0b565b9150509250929050565b600060208284031215610d0657600080fd5b6000610d1484828501610c35565b91505092915050565b610d2681611123565b82525050565b610d3581611135565b82525050565b610d448161116b565b82525050565b6000610d57600883610ffd565b9150610d62826112a7565b602082019050919050565b6000610d7a601083610ffd565b9150610d85826112d0565b602082019050919050565b6000610d9d602683610ffd565b9150610da8826112f9565b604082019050919050565b6000610dc0600783610ffd565b9150610dcb82611348565b602082019050919050565b6000610de3602083610ffd565b9150610dee82611371565b602082019050919050565b6000610e06600783610ffd565b9150610e118261139a565b602082019050919050565b610e2581611161565b82525050565b6000602082019050610e406000830184610d1d565b92915050565b6000604082019050610e5b6000830185610d1d565b610e686020830184610e1c565b9392505050565b6000602082019050610e846000830184610d2c565b92915050565b6000602082019050610e9f6000830184610d3b565b92915050565b60006020820190508181036000830152610ebe81610d4a565b9050919050565b60006020820190508181036000830152610ede81610d6d565b9050919050565b60006020820190508181036000830152610efe81610d90565b9050919050565b60006020820190508181036000830152610f1e81610db3565b9050919050565b60006020820190508181036000830152610f3e81610dd6565b9050919050565b60006020820190508181036000830152610f5e81610df9565b9050919050565b6000602082019050610f7a6000830184610e1c565b92915050565b6000610f8a610f9b565b9050610f96828261118f565b919050565b6000604051905090565b600067ffffffffffffffff821115610fc057610fbf611267565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610fec57610feb611267565b5b602082029050602081019050919050565b600082825260208201905092915050565b600061101982611161565b915061102483611161565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561105957611058611209565b5b828201905092915050565b600061106f82611161565b915061107a83611161565b92508261108a57611089611238565b5b828204905092915050565b60006110a082611161565b91506110ab83611161565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110e4576110e3611209565b5b828202905092915050565b60006110fa82611161565b915061110583611161565b92508282101561111857611117611209565b5b828203905092915050565b600061112e82611141565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111768261117d565b9050919050565b600061118882611141565b9050919050565b61119882611296565b810181811067ffffffffffffffff821117156111b7576111b6611267565b5b80604052505050565b60006111cb82611161565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111fe576111fd611209565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f2153746172746564000000000000000000000000000000000000000000000000600082015250565b7f4e6f7468696e6720746f20636c61696d00000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f214c656e67746800000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5374617274656400000000000000000000000000000000000000000000000000600082015250565b6113cc81611123565b81146113d757600080fd5b50565b6113e381611135565b81146113ee57600080fd5b50565b6113fa81611161565b811461140557600080fd5b5056fea2646970667358221220126fb3d75fc9a5859c2d1e171d97d05a2a05aa3cf3c467609144cc0996e8e8ff64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637313ee5a1161008c578063c884ef8311610066578063c884ef83146101dc578063c992b5b21461020c578063f2fde38b14610216578063fc0c546a14610232576100cf565b80637313ee5a146101825780638da5cb5b146101a0578063be9a6555146101be576100cf565b80631f2698ab146100d45780631ff64acd146100f2578063402914f51461010e5780634e71d92d1461013e57806352a9039c14610148578063715018a614610178575b600080fd5b6100dc610250565b6040516100e99190610e6f565b60405180910390f35b61010c60048036038101906101079190610c88565b610263565b005b61012860048036038101906101239190610c5f565b61040b565b6040516101359190610f65565b60405180910390f35b610146610589565b005b610162600480360381019061015d9190610c5f565b61072f565b60405161016f9190610f65565b60405180910390f35b610180610747565b005b61018a6107cf565b6040516101979190610f65565b60405180910390f35b6101a86107d5565b6040516101b59190610e2b565b60405180910390f35b6101c66107fe565b6040516101d39190610f65565b60405180910390f35b6101f660048036038101906101f19190610c5f565b610804565b6040516102039190610f65565b60405180910390f35b61021461081c565b005b610230600480360381019061022b9190610c5f565b61090c565b005b61023a610a04565b6040516102479190610e8a565b60405180910390f35b600560009054906101000a900460ff1681565b61026b610a28565b73ffffffffffffffffffffffffffffffffffffffff166102896107d5565b73ffffffffffffffffffffffffffffffffffffffff16146102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690610f25565b60405180910390fd5b8051825114610323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031a90610f05565b60405180910390fd5b60005b825181101561040657818181518110610368577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600160008584815181106103ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806103fe906111c0565b915050610326565b505050565b6000600560009054906101000a900460ff1661042a5760009050610584565b6004546003544261043b91906110ef565b11156104d257600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104cb91906110ef565b9050610584565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004546003544261052391906110ef565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461056d9190611095565b6105779190611064565b61058191906110ef565b90505b919050565b600560009054906101000a900460ff166105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90610ea5565b60405180910390fd5b60006105e33361040b565b905060008111610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061f90610ec5565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610677919061100e565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106d9929190610e46565b602060405180830381600087803b1580156106f357600080fd5b505af1158015610707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b9190610cf4565b5050565b60016020528060005260406000206000915090505481565b61074f610a28565b73ffffffffffffffffffffffffffffffffffffffff1661076d6107d5565b73ffffffffffffffffffffffffffffffffffffffff16146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90610f25565b60405180910390fd5b6107cd6000610a30565b565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b60026020528060005260406000206000915090505481565b610824610a28565b73ffffffffffffffffffffffffffffffffffffffff166108426107d5565b73ffffffffffffffffffffffffffffffffffffffff1614610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f90610f25565b60405180910390fd5b600560009054906101000a900460ff16156108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90610f45565b60405180910390fd5b6001600560006101000a81548160ff02191690831515021790555042600381905550565b610914610a28565b73ffffffffffffffffffffffffffffffffffffffff166109326107d5565b73ffffffffffffffffffffffffffffffffffffffff1614610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f90610f25565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ef90610ee5565b60405180910390fd5b610a0181610a30565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610b07610b0284610fa5565b610f80565b90508083825260208201905082856020860282011115610b2657600080fd5b60005b85811015610b565781610b3c8882610bcc565b845260208401935060208301925050600181019050610b29565b5050509392505050565b6000610b73610b6e84610fd1565b610f80565b90508083825260208201905082856020860282011115610b9257600080fd5b60005b85811015610bc25781610ba88882610c4a565b845260208401935060208301925050600181019050610b95565b5050509392505050565b600081359050610bdb816113c3565b92915050565b600082601f830112610bf257600080fd5b8135610c02848260208601610af4565b91505092915050565b600082601f830112610c1c57600080fd5b8135610c2c848260208601610b60565b91505092915050565b600081519050610c44816113da565b92915050565b600081359050610c59816113f1565b92915050565b600060208284031215610c7157600080fd5b6000610c7f84828501610bcc565b91505092915050565b60008060408385031215610c9b57600080fd5b600083013567ffffffffffffffff811115610cb557600080fd5b610cc185828601610be1565b925050602083013567ffffffffffffffff811115610cde57600080fd5b610cea85828601610c0b565b9150509250929050565b600060208284031215610d0657600080fd5b6000610d1484828501610c35565b91505092915050565b610d2681611123565b82525050565b610d3581611135565b82525050565b610d448161116b565b82525050565b6000610d57600883610ffd565b9150610d62826112a7565b602082019050919050565b6000610d7a601083610ffd565b9150610d85826112d0565b602082019050919050565b6000610d9d602683610ffd565b9150610da8826112f9565b604082019050919050565b6000610dc0600783610ffd565b9150610dcb82611348565b602082019050919050565b6000610de3602083610ffd565b9150610dee82611371565b602082019050919050565b6000610e06600783610ffd565b9150610e118261139a565b602082019050919050565b610e2581611161565b82525050565b6000602082019050610e406000830184610d1d565b92915050565b6000604082019050610e5b6000830185610d1d565b610e686020830184610e1c565b9392505050565b6000602082019050610e846000830184610d2c565b92915050565b6000602082019050610e9f6000830184610d3b565b92915050565b60006020820190508181036000830152610ebe81610d4a565b9050919050565b60006020820190508181036000830152610ede81610d6d565b9050919050565b60006020820190508181036000830152610efe81610d90565b9050919050565b60006020820190508181036000830152610f1e81610db3565b9050919050565b60006020820190508181036000830152610f3e81610dd6565b9050919050565b60006020820190508181036000830152610f5e81610df9565b9050919050565b6000602082019050610f7a6000830184610e1c565b92915050565b6000610f8a610f9b565b9050610f96828261118f565b919050565b6000604051905090565b600067ffffffffffffffff821115610fc057610fbf611267565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610fec57610feb611267565b5b602082029050602081019050919050565b600082825260208201905092915050565b600061101982611161565b915061102483611161565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561105957611058611209565b5b828201905092915050565b600061106f82611161565b915061107a83611161565b92508261108a57611089611238565b5b828204905092915050565b60006110a082611161565b91506110ab83611161565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110e4576110e3611209565b5b828202905092915050565b60006110fa82611161565b915061110583611161565b92508282101561111857611117611209565b5b828203905092915050565b600061112e82611141565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111768261117d565b9050919050565b600061118882611141565b9050919050565b61119882611296565b810181811067ffffffffffffffff821117156111b7576111b6611267565b5b80604052505050565b60006111cb82611161565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111fe576111fd611209565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f2153746172746564000000000000000000000000000000000000000000000000600082015250565b7f4e6f7468696e6720746f20636c61696d00000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f214c656e67746800000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5374617274656400000000000000000000000000000000000000000000000000600082015250565b6113cc81611123565b81146113d757600080fd5b50565b6113e381611135565b81146113ee57600080fd5b50565b6113fa81611161565b811461140557600080fd5b5056fea2646970667358221220126fb3d75fc9a5859c2d1e171d97d05a2a05aa3cf3c467609144cc0996e8e8ff64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 861,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "allocations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 865,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "claimed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 867,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "start",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 870,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "vestingPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 872,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "started",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}